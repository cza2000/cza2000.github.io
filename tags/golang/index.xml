<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on 陈子桉的博客</title>
    <link>https://ziannchen.work/tags/golang/</link>
    <description>Recent content in golang on 陈子桉的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 05 Feb 2022 21:26:29 +0800</lastBuildDate><atom:link href="https://ziannchen.work/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TinyKV Project4: Transaction</title>
      <link>https://ziannchen.work/2022/tinykv-project4-transaction/</link>
      <pubDate>Sat, 05 Feb 2022 21:26:29 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/tinykv-project4-transaction/</guid>
      <description>在之前的几个 projects 中，我们已经构建起了基于 multi-raft 的分布式KV数据库。在 project 4 中，我们将构建一个事务系统以应对多个 clinet 的并发请求并保证快照隔离（snaps</description>
    </item>
    
    <item>
      <title>TinyKV Project3: MultiRaftKV</title>
      <link>https://ziannchen.work/2022/tinykv-project3-multiraftkv/</link>
      <pubDate>Sat, 05 Feb 2022 21:19:15 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/tinykv-project3-multiraftkv/</guid>
      <description>在本项目中我们需要实现基于多个raft集群的KV服务器，其中的每一个raft集群只负责固定范围内的关键字，从而解决raft算法为了追求一致性</description>
    </item>
    
    <item>
      <title>TinyKV Project2: RaftKV</title>
      <link>https://ziannchen.work/2022/tinykv-project2-raftkv/</link>
      <pubDate>Sat, 05 Feb 2022 21:13:40 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/tinykv-project2-raftkv/</guid>
      <description>在本项目中我们需要实现一个基于 raft 分布式共识算法的高可用kv存储服务器，它既需要我们实现Raft算法也需要我们知道如何实际使用它。 我们通过3个</description>
    </item>
    
    <item>
      <title>TinyKV Project1: StandaloneKV</title>
      <link>https://ziannchen.work/2022/tinykv-project1-standalonekv/</link>
      <pubDate>Sat, 05 Feb 2022 21:04:35 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/tinykv-project1-standalonekv/</guid>
      <description>总览 4个 project，我们总体上看需要做这么多事： 根据Raft论文,实现了Raft模块,具备Leader选举,日志复制,Snapshot等</description>
    </item>
    
    <item>
      <title>mit-6.824 lab4: ShardKV</title>
      <link>https://ziannchen.work/2022/mit-6.824-lab4-shardkv/</link>
      <pubDate>Fri, 04 Feb 2022 13:21:03 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/mit-6.824-lab4-shardkv/</guid>
      <description>lab课程网址 https://pdos.csail.mit.edu/6.824/labs/lab-shard.html 本次lab是最难的一次lab，很多地方需要我们自由发挥，不像lab2那样可以参考论文。 Lab2和Lab3构成基础分布式数据库</description>
    </item>
    
    <item>
      <title>mit-6.824 lab3: RaftKV</title>
      <link>https://ziannchen.work/2022/mit-6.824-lab3-raftkv/</link>
      <pubDate>Thu, 03 Feb 2022 15:06:21 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/mit-6.824-lab3-raftkv/</guid>
      <description>Lab3: KVRaft lab链接 https://pdos.csail.mit.edu/6.824/labs/lab-kvraft.html 本次lab中我们需要使用lab2中实现的Raft库来构建一个可容错的 Key/Value 存储服务，要求其对外提供强一致性（Strong cons</description>
    </item>
    
    <item>
      <title>mit-6.824 lab2: Raft</title>
      <link>https://ziannchen.work/2022/mit-6.824-lab2-raft/</link>
      <pubDate>Thu, 03 Feb 2022 15:04:30 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/mit-6.824-lab2-raft/</guid>
      <description>Lab2: Raft lab原链接 https://pdos.csail.mit.edu/6.824/labs/lab-raft.html Raft是一种基于复制的状态机协议，通过在多个副本服务器上存储其状态（即数据）的完整副本来实现容错。 Raft将客户端请求组</description>
    </item>
    
    <item>
      <title>mit-6.824 lab1: MapReduce</title>
      <link>https://ziannchen.work/2022/mit-6.824-lab1-mapreduce/</link>
      <pubDate>Thu, 03 Feb 2022 15:01:24 +0800</pubDate>
      
      <guid>https://ziannchen.work/2022/mit-6.824-lab1-mapreduce/</guid>
      <description>Lab1: MapReduce 在本次lab中我们的任务是实现一个分布式的MapReduce，它由两个程序组成，Coordinator和Worker。只有一个Coord</description>
    </item>
    
  </channel>
</rss>
